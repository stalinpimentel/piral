const axios = require('axios');
const yauzl = require('yauzl');
const fs = require('fs');
const path = require('path');

module.exports = function() {
  const version = process.env.PIRAL_BLAZOR_VERSION || '';
  const prefix = 'staticwebassets/';
  const outDir = this.options.outDir;
  const frameworkDir = path.resolve(outDir, '_framework');
  const binDir = path.resolve(frameworkDir, '_bin');
  const wasmDir = path.resolve(frameworkDir, 'wasm');
  const blazorBootFile = path.resolve(frameworkDir, 'blazor.boot.json');

  !fs.existsSync(frameworkDir) && fs.mkdirSync(frameworkDir);
  !fs.existsSync(binDir) && fs.mkdirSync(binDir);
  !fs.existsSync(wasmDir) && fs.mkdirSync(wasmDir);

  return axios
    .get(`https://www.nuget.org/api/v2/package/Piral.Blazor.Core/${version}`, { responseType: 'arraybuffer' })
    .then(res => res.data)
    .then(
      buffer =>
        new Promise((resolve, reject) => {
          yauzl.fromBuffer(buffer, { lazyEntries: true }, (err, zip) => {
            if (err) {
              reject(err);
            } else {
              zip.on('entry', entry => {
                const file = entry.fileName;
                const dir = path.dirname(file);

                if (dir.startsWith(prefix)) {
                  const target = path.resolve(outDir, file.substring(prefix.length));
                  zip.openReadStream(entry, (err, rs) => {
                    if (err) {
                      reject(err);
                    } else {
                      const ws = fs.createWriteStream(target);
                      rs.on('end', () => {
                        ws.close();
                        zip.readEntry();
                      });
                      rs.pipe(ws);
                    }
                  });
                } else {
                  zip.readEntry();
                }
              });
              zip.on('end', function() {
                const config = fs.readFileSync(blazorBootFile, 'utf8');
                resolve(`module.exports = ${config};`);
              });
              zip.readEntry();
            }
          });
        }),
    );
};
