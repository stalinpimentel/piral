const { readFileSync } = require('fs');
const { extract } = require('keyword-extractor');
const { render } = require('./markdown');
const { getName, getCommands, getDocs, getQuestions, getSpecs, getTutorials, getCoreTypes, getCodes } = require('./paths');

function normalize(keyword) {
  if (keyword.startsWith('```')) {
    return '';
  }

  if (/^\*\*.*\*\*$/.test(keyword)) {
    keyword = keyword.substr(2, keyword.length - 4);
  }

  if (/^`.*`$/.test(keyword) || /^\*.*\*$/.test(keyword)) {
    keyword = keyword.substr(1, keyword.length - 2);
  }

  if (keyword.startsWith('--') && keyword.length > 2) {
    keyword = keyword.substr(2);
  }

  if (keyword.startsWith('[')) {
    keyword = keyword.substr(1);
  }

  if (keyword.indexOf(']') !== -1) {
    keyword = keyword.substr(0, keyword.indexOf(']'));
  }

  if (/^[a-z\-]+$/.test(keyword)) {
    return keyword;
  }

  return '';
}

function count(results, keyword) {
  if (results[keyword]) {
    results[keyword]++;
  } else if (keyword) {
    results[keyword] = 1;
  }
}

function findKeywords(sentence) {
  const result = extract(sentence, {
    language: 'english',
    remove_digits: true,
    return_changed_case: true,
    remove_duplicates: false,
  });

  const results = {};

  for (const item of result) {
    const root = normalize(item);
    const keywords = root.split(/[\-\/\.]/g);

    for (const keyword of keywords) {
      count(results, keyword);
    }

    if (keywords.length > 1) {
      count(results, root);
    }
  }

  return Object.keys(results).map(keyword => ({
    keyword,
    count: results[keyword],
  }));
}

module.exports = function() {
  const commands = findKeywords(
    getCommands()
      .map(m => readFileSync(m, 'utf8'))
      .join('\n\n'),
  );

  const specs = findKeywords(
    getSpecs()
      .map(m => readFileSync(m, 'utf8'))
      .join('\n\n'),
  );

  const docs = findKeywords(
    getDocs()
      .map(m => readFileSync(m, 'utf8'))
      .join('\n\n'),
  );

  const questions = findKeywords(
    getQuestions()
      .map(m => readFileSync(m, 'utf8'))
      .join('\n\n'),
  );

  const types = findKeywords(
    getCoreTypes()
      .map(m => readFileSync(m, 'utf8'))
      .join('\n\n'),
  );

  const codes = getCodes().map(m => ({
    result: findKeywords(readFileSync(m, 'utf8')),
    meta: render(m).meta,
    name: getName(m),
  }));

  const tutorials = getTutorials().map(m => ({
    result: findKeywords(readFileSync(m, 'utf8')),
    meta: render(m).meta,
    name: getName(m),
  }));

  const search = [
    {
      keywords: commands,
      title: 'Tooling',
      route: '/reference/tooling',
    },
    {
      keywords: specs,
      title: 'Specifications',
      route: '/reference/specifications',
    },
    {
      keywords: docs,
      title: 'Documentation',
      route: '/reference/documentation',
    },
    {
      keywords: questions,
      title: 'FAQ',
      route: '/faq',
    },
    {
      keywords: types,
      title: 'Types',
      route: '/reference/types',
    },
    ...codes.map(code => ({
      keywords: [...code.result, {
        count: 100,
        keyword: code.name,
      }],
      title: code.meta.title,
      route: `/reference/codes/${code.name}`,
    })),
    ...tutorials.map(tutorial => ({
      keywords: tutorial.result,
      title: tutorial.meta.title,
      route: `/tutorials/${tutorial.name}`,
    })),
  ];

  return `module.exports = ${JSON.stringify(search)}`;
};
